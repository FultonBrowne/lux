#!/bin/bash

# -------------------------------------------------------
# A shell script that sets the brightness level
# Written by: Thomas Venries
# Last updated on: 2016/7/11
# -------------------------------------------------------

usage() {
	echo -e "Usage: lux [OPTION]...
Option values are positive integers.
For percent mode: add '%' after value.

Information:
  (none):\t\tPrint the selected controller's name and the brightness thresholds.
  -h:\t\t\tPrint this help and exit

Configuration options (can be used in conjunction with brightness options):
  -m:\t\t\tSet the minimum brightness
  -M:\t\t\tSet the maximum brightness
  -c {controller}:\tSet the controller (/sys/class/backlight/{controller})

Brightness options (can not be use in conjunction):
  -a:\t\t\tAdd value
  -s:\t\t\tSubtract value
  -S:\t\t\tSet the brightness"
}

no_conjunction_with() {
	while [ $# -ne 0 ]; do
		[ "$1" = true ] && break || shift
	done

	if [ $# -eq 0 ]; then
		return 1
	fi

	echo "Operation arguments can not be used in conjunction."
	return 0
}

is_positive_integer() {
	[[ "$1" =~ ^[0-9]+ ]] && return 1 || return 0
}

is_percentage() {
	local out=`echo $1 | grep -e "%$"`
	if [ -z "$out" ]; then
		return 0
	fi
	return 1
}

check_controller() {
	if ! [ "$#" -eq 1 ]; then return 0; fi

	if ! [ -f "$1/max_brightness" ] ||
		! [ -f "$1/brightness" ] ||
		! [ -r "$1/max_brightness" ] ||
		! [ -r "$1/brightness" ] ; then
		#! [ -w "${i}/brightness" ] ; then
	return 0
	fi
	return 1
}

main() {
	local mFlag=false
	local MFlag=false
	local cFlag=false
	local aFlag=false
	local sFlag=false
	local SFlag=false
	local PERCENT_MODE=false

	OPTIND=1
	while getopts "hm:M:c:a:s:S:" opt; do
		case $opt in
			h) usage && exit 0;;
			m)
				is_positive_integer "$OPTARG"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				mFlag=true
				mArg=$OPTARG
				;;
			M)
				is_positive_integer "$OPTARG"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				MFlag=true
				MArg=$OPTARG
				;;
			c)
				check_controller "$OPTARG"
				if [ "$?" -eq 0 ]; then
					echo "Controller '$OPTARG' not found."
					exit 1
				fi
				cFlag=true
				cArg=$OPTARG
				;;
			a)
				no_conjunction_with "$sFlag" "$SFlag"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				is_percentage "$OPTARG"
				if [ "$?" == 1 ]; then
					PERCENT_MODE=true
					OPTARG=`echo $OPTARG | cut -d % -f 1`
				fi
				is_positive_integer "$OPTARG"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				aFlag=true
				valArg=$OPTARG
				;;
			s)
				no_conjunction_with "$aFlag" "$SFlag"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				is_percentage "$OPTARG"
				if [ "$?" == 1 ]; then
					PERCENT_MODE=true
					OPTARG=`echo $OPTARG | cut -d % -f 1`
				fi
				is_positive_integer "$OPTARG"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				sFlag=true
				valArg=$OPTARG
				;;
			S)
				no_conjunction_with "$aFlag" "$sFlag"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				is_percentage "$OPTARG"
				if [ "$?" == 1 ]; then
					PERCENT_MODE=true
					OPTARG=`echo $OPTARG | cut -d % -f 1`
				fi
				is_positive_integer "$OPTARG"
				if [ "$?" == 0 ]; then usage; exit 2; fi
				SFlag=true
				valArg=$OPTARG
				;;
			\?) exit 2 ;;
			:) exit 2 ;;
		esac
	done

	local best_controller=
	local best_max=0

	if [ "$cFlag" = true ] ; then
		best_controller=$cArg
		best_max=`cat $best_controller/max_brightness`
	else
		# Try to find the best-max-value controller
		for i in `echo /sys/class/backlight/*` ; do
			check_controller ${i}
			[ "$?" -eq 0 ] && continue
			max=`cat ${i}/max_brightness`
			if (( "$best_max" < "$max" )) ; then
				best_max=$max
				best_controller=${i}
			fi
		done

		if [ -z "$best_controller" ] ; then
			echo "Controller not found."
			exit 1
		fi
	fi

	local own_min=0
	local own_max=$(( best_max-1 ))
	local file="$best_controller/brightness"
	local brightness=$(cat $file)

	if [ "$#" -eq 0 ]; then
		echo "$best_controller: $own_min;$brightness;$own_max"
		exit 0
	fi

	# No set option
	if [ "$aFlag" = false ] && [ "$sFlag" = false ] && [ "$SFlag" = false ]
	then
		usage; exit 0
	fi

	[ "$mFlag" = true ] && own_min=$mArg
	[ "$MFlag" = true ] && own_max=$MArg

	if [ "$aFlag" = true ]; then
		if [ "$PERCENT_MODE" = true ]; then
			valArg=$(( (own_max - own_min) * valArg / 100 ))
		fi
		value=$(( brightness+valArg ))
		if (( $brightness == 0 )) ; then
			value=$(( own_min+valArg ))
		elif (( "$value" > "$own_max" )) ; then
			value=$own_max
		fi
		echo $value | sudo /usr/bin/tee $file
	fi

	if [ "$sFlag" = true ]; then
		if [ "$PERCENT_MODE" = true ]; then
			valArg=$(( (own_max - own_min) * valArg / 100 ))
		fi
		value=$(( brightness-valArg ))
		(( $value <= $own_min )) && value=0
		echo $value | sudo /usr/bin/tee $file
	fi

	if [ "$SFlag" = true ]; then
		if [ "$PERCENT_MODE" = true ]; then
			valArg=$(( own_min + (own_max - own_min) * valArg / 100 ))
		fi
		value=$valArg
		if (( $value > $own_max )) ; then
			value=$own_max
		elif (( $value < $own_min )) ; then
			value=0
		fi
		echo $value | sudo /usr/bin/tee $file
	fi

	shift "$((OPTIND-1))"
}

main "$@"
